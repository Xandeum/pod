# .github/workflows/release.yml in your private 'pod' repository

name: Build and Publish to APT Repository (GPG-Free)

on:
  push:
    tags:
      - 'v*'

jobs:
  publish-deb-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pod repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - name: Build Debian package
        run: cargo deb

      - name: Checkout APT repository
        uses: actions/checkout@v4
        with:
          repository: Xandeum/pod-apt-package
          path: apt-repo
          token: ${{ secrets.PAT }}

      # This is the updated, more robust step with logging
      - name: Update APT repository metadata
        run: |
          set -x # Enable verbose logging for this step

          # Define paths
          REPO_DIR="${GITHUB_WORKSPACE}/apt-repo"
          DEB_DIR="${GITHUB_WORKSPACE}/target/debian"

          # Create the repository structure
          echo "--- Creating repository structure ---"
          mkdir -p "${REPO_DIR}/dists/stable/main/binary-amd64"
          mkdir -p "${REPO_DIR}/pool/main"

          # Copy the built .deb package
          echo "--- Copying .deb package ---"
          cp ${DEB_DIR}/*.deb "${REPO_DIR}/pool/main/"

          # --- DEBUG: Show the file structure BEFORE generating metadata ---
          echo "--- File structure inside apt-repo before metadata generation ---"
          ls -R "${REPO_DIR}"

          # --- Generate Metadata ---
          # We change into the repo directory to ensure all paths are relative and correct
          cd "${REPO_DIR}"

          echo "--- Generating Packages file ---"
          # Scan packages and create the Packages index
          dpkg-scanpackages --multiversion pool > dists/stable/main/binary-amd64/Packages

          echo "--- Compressing Packages file ---"
          # Gzip the Packages file
          gzip -9 -c dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz

          echo "--- Generating Release file ---"
          # Create the final Release file
          apt-ftparchive release dists/stable > dists/stable/Release

          # --- DEBUG: Show the file structure AFTER generating metadata ---
          echo "--- Final file structure inside apt-repo ---"
          ls -R "${REPO_DIR}"

      - name: Commit and push changes
        run: |
          cd "${GITHUB_WORKSPACE}/apt-repo"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          if ! git diff-index --quiet HEAD; then
            echo "Changes detected. Committing and pushing to APT repository..."
            git add .
            git commit -m "ci: Add pod package version ${{ github.ref_name }}"
            git push
          else
            echo "No changes to commit."
          fi